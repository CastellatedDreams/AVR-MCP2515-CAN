
AVR128DA48-canbus-write.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00804000  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00804002  00804002  00000646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047c0  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f06  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2a  00000000  00000000  00007e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00008988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001db5  00000000  00000000  00008c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c83  00000000  00000000  0000a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000b648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
   4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  70:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  74:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  7c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  80:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  84:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  88:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  8c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  90:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  94:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  98:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  9c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  a0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  a4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  a8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  ac:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  b0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  b4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  b8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  bc:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  c0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  c4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  c8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  cc:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  d0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  d4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  d8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  dc:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  e0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  e4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  e8:	0b 02       	muls	r16, r27
  ea:	2f 02       	muls	r18, r31
  ec:	0f 02       	muls	r16, r31
  ee:	13 02       	muls	r17, r19
  f0:	17 02       	muls	r17, r23
  f2:	1b 02       	muls	r17, r27
  f4:	1f 02       	muls	r17, r31
  f6:	23 02       	muls	r18, r19
  f8:	27 02       	muls	r18, r23

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	cd bf       	out	0x3d, r28	; 61
 102:	df e7       	ldi	r29, 0x7F	; 127
 104:	de bf       	out	0x3e, r29	; 62

00000106 <__do_copy_data>:
 106:	10 e4       	ldi	r17, 0x40	; 64
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b0 e4       	ldi	r27, 0x40	; 64
 10c:	e0 eb       	ldi	r30, 0xB0	; 176
 10e:	f5 e0       	ldi	r31, 0x05	; 5
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	0b bf       	out	0x3b, r16	; 59
 114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x14>
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 30       	cpi	r26, 0x02	; 2
 11c:	b1 07       	cpc	r27, r17
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x10>

00000120 <__do_clear_bss>:
 120:	20 e4       	ldi	r18, 0x40	; 64
 122:	a2 e0       	ldi	r26, 0x02	; 2
 124:	b0 e4       	ldi	r27, 0x40	; 64
 126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
 128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
 12a:	ae 30       	cpi	r26, 0x0E	; 14
 12c:	b2 07       	cpc	r27, r18
 12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
 130:	0e 94 c8 02 	call	0x590	; 0x590 <main>
 134:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

00000138 <__bad_interrupt>:
 138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <_ZN11MCP2515_CAN9_spi_initEP11PORT_struct>:
	{
		msg.data[i] = rxbn[5 + i];
	}

	return msg;
}
 13c:	fb 01       	movw	r30, r22
 13e:	80 ed       	ldi	r24, 0xD0	; 208
 140:	81 83       	std	Z+1, r24	; 0x01
 142:	84 81       	ldd	r24, Z+4	; 0x04
 144:	80 68       	ori	r24, 0x80	; 128
 146:	84 83       	std	Z+4, r24	; 0x04
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	82 83       	std	Z+2, r24	; 0x02
 14c:	e0 e4       	ldi	r30, 0x40	; 64
 14e:	f9 e0       	ldi	r31, 0x09	; 9
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	80 83       	st	Z, r24
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <_ZN11MCP2515_CAN9_spi_openEv>:
 15e:	e0 e0       	ldi	r30, 0x00	; 0
 160:	f4 e0       	ldi	r31, 0x04	; 4
 162:	84 81       	ldd	r24, Z+4	; 0x04
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	84 83       	std	Z+4, r24	; 0x04
 168:	08 95       	ret

0000016a <_ZN11MCP2515_CAN10_spi_closeEv>:
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	84 81       	ldd	r24, Z+4	; 0x04
 170:	80 68       	ori	r24, 0x80	; 128
 172:	84 83       	std	Z+4, r24	; 0x04
 174:	08 95       	ret

00000176 <_ZN11MCP2515_CAN10_spi_writeEh>:
 176:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 17a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 17e:	88 23       	and	r24, r24
 180:	e4 f7       	brge	.-8      	; 0x17a <_ZN11MCP2515_CAN10_spi_writeEh+0x4>
 182:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 186:	08 95       	ret

00000188 <_ZN11MCP2515_CAN10_mcp_resetEv>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11MCP2515_CAN9_spi_openEv>
 192:	60 ec       	ldi	r22, 0xC0	; 192
 194:	ce 01       	movw	r24, r28
 196:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11MCP2515_CAN10_spi_closeEv>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <_ZN11MCP2515_CAN10_mpc_writeEhh>:
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
 1b0:	06 2f       	mov	r16, r22
 1b2:	14 2f       	mov	r17, r20
 1b4:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11MCP2515_CAN9_spi_openEv>
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 1c0:	60 2f       	mov	r22, r16
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 1c8:	61 2f       	mov	r22, r17
 1ca:	ce 01       	movw	r24, r28
 1cc:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11MCP2515_CAN10_spi_closeEv>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <_ZN11MCP2515_CAN9_mcp_readEh>:
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	16 2f       	mov	r17, r22
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11MCP2515_CAN9_spi_openEv>
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 1f6:	61 2f       	mov	r22, r17
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	ce 01       	movw	r24, r28
 202:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 206:	18 2f       	mov	r17, r24
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11MCP2515_CAN10_spi_closeEv>
 20e:	81 2f       	mov	r24, r17
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	08 95       	ret

00000218 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg>:
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	2d 97       	sbiw	r28, 0x0d	; 13
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	7c 01       	movw	r14, r24
 22e:	16 2f       	mov	r17, r22
 230:	fa 01       	movw	r30, r20
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	9c 01       	movw	r18, r24
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	36 95       	lsr	r19
 23e:	27 95       	ror	r18
 240:	36 95       	lsr	r19
 242:	27 95       	ror	r18
 244:	29 83       	std	Y+1, r18	; 0x01
 246:	82 95       	swap	r24
 248:	88 0f       	add	r24, r24
 24a:	80 7e       	andi	r24, 0xE0	; 224
 24c:	8a 83       	std	Y+2, r24	; 0x02
 24e:	1b 82       	std	Y+3, r1	; 0x03
 250:	1c 82       	std	Y+4, r1	; 0x04
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	8d 83       	std	Y+5, r24	; 0x05
 258:	83 81       	ldd	r24, Z+3	; 0x03
 25a:	8e 83       	std	Y+6, r24	; 0x06
 25c:	84 81       	ldd	r24, Z+4	; 0x04
 25e:	8f 83       	std	Y+7, r24	; 0x07
 260:	85 81       	ldd	r24, Z+5	; 0x05
 262:	88 87       	std	Y+8, r24	; 0x08
 264:	86 81       	ldd	r24, Z+6	; 0x06
 266:	89 87       	std	Y+9, r24	; 0x09
 268:	87 81       	ldd	r24, Z+7	; 0x07
 26a:	8a 87       	std	Y+10, r24	; 0x0a
 26c:	80 85       	ldd	r24, Z+8	; 0x08
 26e:	8b 87       	std	Y+11, r24	; 0x0b
 270:	81 85       	ldd	r24, Z+9	; 0x09
 272:	8c 87       	std	Y+12, r24	; 0x0c
 274:	82 85       	ldd	r24, Z+10	; 0x0a
 276:	8d 87       	std	Y+13, r24	; 0x0d
 278:	c7 01       	movw	r24, r14
 27a:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11MCP2515_CAN9_spi_openEv>
 27e:	12 30       	cpi	r17, 0x02	; 2
 280:	29 f4       	brne	.+10     	; 0x28c <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x74>
 282:	64 e4       	ldi	r22, 0x44	; 68
 284:	c7 01       	movw	r24, r14
 286:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x8a>
 28c:	11 30       	cpi	r17, 0x01	; 1
 28e:	29 f4       	brne	.+10     	; 0x29a <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x82>
 290:	62 e4       	ldi	r22, 0x42	; 66
 292:	c7 01       	movw	r24, r14
 294:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x8a>
 29a:	60 e4       	ldi	r22, 0x40	; 64
 29c:	c7 01       	movw	r24, r14
 29e:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	1d 30       	cpi	r17, 0x0D	; 13
 2a6:	60 f4       	brcc	.+24     	; 0x2c0 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0xa8>
 2a8:	e1 e0       	ldi	r30, 0x01	; 1
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 0f       	add	r30, r28
 2ae:	fd 1f       	adc	r31, r29
 2b0:	e1 0f       	add	r30, r17
 2b2:	f1 1d       	adc	r31, r1
 2b4:	60 81       	ld	r22, Z
 2b6:	c7 01       	movw	r24, r14
 2b8:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 2bc:	1f 5f       	subi	r17, 0xFF	; 255
 2be:	f2 cf       	rjmp	.-28     	; 0x2a4 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x8c>
 2c0:	c7 01       	movw	r24, r14
 2c2:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11MCP2515_CAN10_spi_closeEv>
 2c6:	2d 96       	adiw	r28, 0x0d	; 13
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	08 95       	ret

000002d8 <_ZN11MCP2515_CAN9_mcp_rtsnEh>:
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	16 2f       	mov	r17, r22
 2e2:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11MCP2515_CAN9_spi_openEv>
 2e6:	12 30       	cpi	r17, 0x02	; 2
 2e8:	29 f4       	brne	.+10     	; 0x2f4 <_ZN11MCP2515_CAN9_mcp_rtsnEh+0x1c>
 2ea:	64 e8       	ldi	r22, 0x84	; 132
 2ec:	ce 01       	movw	r24, r28
 2ee:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 2f2:	0b c0       	rjmp	.+22     	; 0x30a <_ZN11MCP2515_CAN9_mcp_rtsnEh+0x32>
 2f4:	11 30       	cpi	r17, 0x01	; 1
 2f6:	29 f4       	brne	.+10     	; 0x302 <_ZN11MCP2515_CAN9_mcp_rtsnEh+0x2a>
 2f8:	62 e8       	ldi	r22, 0x82	; 130
 2fa:	ce 01       	movw	r24, r28
 2fc:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 300:	04 c0       	rjmp	.+8      	; 0x30a <_ZN11MCP2515_CAN9_mcp_rtsnEh+0x32>
 302:	61 e8       	ldi	r22, 0x81	; 129
 304:	ce 01       	movw	r24, r28
 306:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
 30a:	ce 01       	movw	r24, r28
 30c:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11MCP2515_CAN10_spi_closeEv>
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	08 95       	ret

00000318 <_ZN11MCP2515_CAN11sendMessageEP7can_msg>:
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	8c 01       	movw	r16, r24
 324:	7b 01       	movw	r14, r22
 326:	60 e3       	ldi	r22, 0x30	; 48
 328:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN11MCP2515_CAN9_mcp_readEh>
 32c:	83 ff       	sbrs	r24, 3
 32e:	0e c0       	rjmp	.+28     	; 0x34c <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x34>
 330:	60 e4       	ldi	r22, 0x40	; 64
 332:	c8 01       	movw	r24, r16
 334:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN11MCP2515_CAN9_mcp_readEh>
 338:	83 ff       	sbrs	r24, 3
 33a:	0a c0       	rjmp	.+20     	; 0x350 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x38>
 33c:	60 e5       	ldi	r22, 0x50	; 80
 33e:	c8 01       	movw	r24, r16
 340:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN11MCP2515_CAN9_mcp_readEh>
 344:	83 fd       	sbrc	r24, 3
 346:	10 c0       	rjmp	.+32     	; 0x368 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x50>
 348:	c2 e0       	ldi	r28, 0x02	; 2
 34a:	03 c0       	rjmp	.+6      	; 0x352 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x3a>
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	01 c0       	rjmp	.+2      	; 0x352 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x3a>
 350:	c1 e0       	ldi	r28, 0x01	; 1
 352:	a7 01       	movw	r20, r14
 354:	6c 2f       	mov	r22, r28
 356:	c8 01       	movw	r24, r16
 358:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg>
 35c:	6c 2f       	mov	r22, r28
 35e:	c8 01       	movw	r24, r16
 360:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN11MCP2515_CAN9_mcp_rtsnEh>
 364:	8c 2f       	mov	r24, r28
 366:	01 c0       	rjmp	.+2      	; 0x36a <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x52>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t>:

MCP2515_MODE_t MCP2515_CAN::setMode(MCP2515_MODE_t mode)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	ec 01       	movw	r28, r24
	//see MCP2515 Documentation page 60, REGISTER 10-1
	uint8_t configuration;
	switch (mode)
 37c:	62 30       	cpi	r22, 0x02	; 2
 37e:	69 f0       	breq	.+26     	; 0x39a <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x24>
 380:	28 f4       	brcc	.+10     	; 0x38c <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x16>
 382:	66 23       	and	r22, r22
 384:	81 f0       	breq	.+32     	; 0x3a6 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x30>
 386:	61 30       	cpi	r22, 0x01	; 1
 388:	31 f0       	breq	.+12     	; 0x396 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x20>
 38a:	0e c0       	rjmp	.+28     	; 0x3a8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x32>
 38c:	63 30       	cpi	r22, 0x03	; 3
 38e:	39 f0       	breq	.+14     	; 0x39e <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x28>
 390:	64 30       	cpi	r22, 0x04	; 4
 392:	39 f0       	breq	.+14     	; 0x3a2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x2c>
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x32>
		case MCP2515_MODE_CONFIG:
		configuration = CANCTRL_REQOP_CONFIG_gc | CANCTRL_OSM_bm; //CANCTRL REQOP to 000, and CANCTRL OCM to 1 (one shot mode, can bus will attempt to send a message only once)
		break;
		
		case MCP2515_MODE_NORMAL:
		configuration = CANCTRL_REQOP_NORMAL_gc | CANCTRL_OSM_bm;
 396:	48 e0       	ldi	r20, 0x08	; 8
		break;
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x32>
		
		case MCP2515_MODE_SLEEP:
		configuration = CANCTRL_REQOP_SLEEP_gc | CANCTRL_OSM_bm;
 39a:	48 e2       	ldi	r20, 0x28	; 40
		break;
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x32>
		
		case MCP2515_MODE_LISTENONLY:
		configuration = CANCTRL_REQOP_LISTENONLY_gc | CANCTRL_OSM_bm;
 39e:	48 e6       	ldi	r20, 0x68	; 104
		break;
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x32>
		
		case MCP2515_MODE_LOOPBACK:
		configuration = CANCTRL_REQOP_LOOPBACK_gc | CANCTRL_OSM_bm;
 3a2:	48 e4       	ldi	r20, 0x48	; 72
		break;
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x32>
	//see MCP2515 Documentation page 60, REGISTER 10-1
	uint8_t configuration;
	switch (mode)
	{
		case MCP2515_MODE_CONFIG:
		configuration = CANCTRL_REQOP_CONFIG_gc | CANCTRL_OSM_bm; //CANCTRL REQOP to 000, and CANCTRL OCM to 1 (one shot mode, can bus will attempt to send a message only once)
 3a6:	48 e8       	ldi	r20, 0x88	; 136
		// Handle invalid mode case
		break;
	}
	
	//write configuration
	_mpc_write(MCP2515_REGISTER_CANCTRL, configuration);
 3a8:	6f e0       	ldi	r22, 0x0F	; 15
 3aa:	ce 01       	movw	r24, r28
 3ac:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN11MCP2515_CAN10_mpc_writeEhh>
	_spi_write(0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	ce 01       	movw	r24, r28
 3b4:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
	
	//check can status register to confirm mode
	uint8_t data = _mcp_read(MCP2515_REGISTER_CANSTAT);
 3b8:	6e e0       	ldi	r22, 0x0E	; 14
 3ba:	ce 01       	movw	r24, r28
 3bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN11MCP2515_CAN9_mcp_readEh>
	
	switch (data & 0b11100000)
 3c0:	80 7e       	andi	r24, 0xE0	; 224
 3c2:	80 34       	cpi	r24, 0x40	; 64
 3c4:	69 f0       	breq	.+26     	; 0x3e0 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x6a>
 3c6:	28 f4       	brcc	.+10     	; 0x3d2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x5c>
 3c8:	88 23       	and	r24, r24
 3ca:	41 f0       	breq	.+16     	; 0x3dc <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x66>
 3cc:	80 32       	cpi	r24, 0x20	; 32
 3ce:	81 f0       	breq	.+32     	; 0x3f0 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x7a>
 3d0:	0d c0       	rjmp	.+26     	; 0x3ec <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x76>
 3d2:	80 36       	cpi	r24, 0x60	; 96
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x6e>
 3d6:	80 38       	cpi	r24, 0x80	; 128
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x72>
 3da:	08 c0       	rjmp	.+16     	; 0x3ec <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x76>
	{
		case CANCTRL_REQOP_NORMAL_gc:
		return MCP2515_MODE_NORMAL;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	09 c0       	rjmp	.+18     	; 0x3f2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x7c>
		
		case CANCTRL_REQOP_SLEEP_gc:
		return MCP2515_MODE_SLEEP;
		
		case CANCTRL_REQOP_LOOPBACK_gc:
		return MCP2515_MODE_LOOPBACK;
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x7c>
		
		case CANCTRL_REQOP_LISTENONLY_gc:
		return MCP2515_MODE_LISTENONLY;
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x7c>
		
		case CANCTRL_REQOP_CONFIG_gc:
		return MCP2515_MODE_CONFIG;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x7c>
		
		default:
		return static_cast<MCP2515_MODE_t>(-1);
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t+0x7c>
	{
		case CANCTRL_REQOP_NORMAL_gc:
		return MCP2515_MODE_NORMAL;
		
		case CANCTRL_REQOP_SLEEP_gc:
		return MCP2515_MODE_SLEEP;
 3f0:	82 e0       	ldi	r24, 0x02	; 2
		
		default:
		return static_cast<MCP2515_MODE_t>(-1);
	}
	
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <_ZN11MCP2515_CAN10setBitrateE13CAN_BITRATE_t>:

void MCP2515_CAN::setBitrate(CAN_BITRATE_t bitrate)
{
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ec 01       	movw	r28, r24
	uint8_t cnf1, cnf2, cnf3;
	
	switch (bitrate)
 402:	86 2f       	mov	r24, r22
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	89 30       	cpi	r24, 0x09	; 9
 408:	91 05       	cpc	r25, r1
 40a:	28 f5       	brcc	.+74     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 40c:	fc 01       	movw	r30, r24
 40e:	ec 58       	subi	r30, 0x8C	; 140
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__tablejump2__>
	{
		case CAN_50kbps:
		cnf1 = 0x03;
		cnf2 = 0xB4;
		cnf3 = 0x86;
 416:	16 e8       	ldi	r17, 0x86	; 134
	
	switch (bitrate)
	{
		case CAN_50kbps:
		cnf1 = 0x03;
		cnf2 = 0xB4;
 418:	04 eb       	ldi	r16, 0xB4	; 180
	uint8_t cnf1, cnf2, cnf3;
	
	switch (bitrate)
	{
		case CAN_50kbps:
		cnf1 = 0x03;
 41a:	43 e0       	ldi	r20, 0x03	; 3
 41c:	23 c0       	rjmp	.+70     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		break;
		
		case CAN_95kbps:
		cnf1 = 0x01;
		cnf2 = 0xB4;
		cnf3 = 0x86;
 41e:	16 e8       	ldi	r17, 0x86	; 134
		cnf3 = 0x85;
		break;
		
		case CAN_95kbps:
		cnf1 = 0x01;
		cnf2 = 0xB4;
 420:	04 eb       	ldi	r16, 0xB4	; 180
		cnf2 = 0xE2;
		cnf3 = 0x85;
		break;
		
		case CAN_95kbps:
		cnf1 = 0x01;
 422:	41 e0       	ldi	r20, 0x01	; 1
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
 424:	1f c0       	rjmp	.+62     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		case CAN_100kbps:
		cnf1 = 0x01;
		cnf2 = 0xB4;
		cnf3 = 0x86;
 426:	16 e8       	ldi	r17, 0x86	; 134
		cnf3 = 0x86;
		break;
		
		case CAN_100kbps:
		cnf1 = 0x01;
		cnf2 = 0xB4;
 428:	04 eb       	ldi	r16, 0xB4	; 180
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
		
		case CAN_100kbps:
		cnf1 = 0x01;
 42a:	41 e0       	ldi	r20, 0x01	; 1
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
 42c:	1b c0       	rjmp	.+54     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		case CAN_125kbps:
		cnf1 = 0x01;
		cnf2 = 0xB1;
		cnf3 = 0x85;
 42e:	15 e8       	ldi	r17, 0x85	; 133
		cnf3 = 0x86;
		break;
		
		case CAN_125kbps:
		cnf1 = 0x01;
		cnf2 = 0xB1;
 430:	01 eb       	ldi	r16, 0xB1	; 177
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
		
		case CAN_125kbps:
		cnf1 = 0x01;
 432:	41 e0       	ldi	r20, 0x01	; 1
		cnf2 = 0xB1;
		cnf3 = 0x85;
		break;
 434:	17 c0       	rjmp	.+46     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		case CAN_200kbps:
		cnf1 = 0x00;
		cnf2 = 0xB4;
		cnf3 = 0x86;
 436:	16 e8       	ldi	r17, 0x86	; 134
		cnf3 = 0x85;
		break;
		
		case CAN_200kbps:
		cnf1 = 0x00;
		cnf2 = 0xB4;
 438:	04 eb       	ldi	r16, 0xB4	; 180
		cnf2 = 0xB1;
		cnf3 = 0x85;
		break;
		
		case CAN_200kbps:
		cnf1 = 0x00;
 43a:	40 e0       	ldi	r20, 0x00	; 0
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
 43c:	13 c0       	rjmp	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		case CAN_250kbps:
		cnf1 = 0x00;
		cnf2 = 0xB1;
		cnf3 = 0x85;
 43e:	15 e8       	ldi	r17, 0x85	; 133
		cnf3 = 0x86;
		break;
		
		case CAN_250kbps:
		cnf1 = 0x00;
		cnf2 = 0xB1;
 440:	01 eb       	ldi	r16, 0xB1	; 177
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
		
		case CAN_250kbps:
		cnf1 = 0x00;
 442:	40 e0       	ldi	r20, 0x00	; 0
		cnf2 = 0xB1;
		cnf3 = 0x85;
		break;
 444:	0f c0       	rjmp	.+30     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		case CAN_500kbps:
		cnf1 = 0x00;
		cnf2 = 0x90;
		cnf3 = 0x82;
 446:	12 e8       	ldi	r17, 0x82	; 130
		cnf3 = 0x85;
		break;
		
		case CAN_500kbps:
		cnf1 = 0x00;
		cnf2 = 0x90;
 448:	00 e9       	ldi	r16, 0x90	; 144
		cnf2 = 0xB1;
		cnf3 = 0x85;
		break;
		
		case CAN_500kbps:
		cnf1 = 0x00;
 44a:	40 e0       	ldi	r20, 0x00	; 0
		cnf2 = 0x90;
		cnf3 = 0x82;
		break;
 44c:	0b c0       	rjmp	.+22     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		case CAN_1000kbps:
		cnf1 = 0x00;
		cnf2 = 0x80;
		cnf3 = 0x80;
 44e:	10 e8       	ldi	r17, 0x80	; 128
		cnf3 = 0x82;
		break;
		
		case CAN_1000kbps:
		cnf1 = 0x00;
		cnf2 = 0x80;
 450:	00 e8       	ldi	r16, 0x80	; 128
		cnf2 = 0x90;
		cnf3 = 0x82;
		break;
		
		case CAN_1000kbps:
		cnf1 = 0x00;
 452:	40 e0       	ldi	r20, 0x00	; 0
		cnf2 = 0x80;
		cnf3 = 0x80;
		break;
 454:	07 c0       	rjmp	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		
		default:
		// Handle invalid bitrate case
		cnf1 = 0xFF;
		cnf2 = 0xFF;
		cnf3 = 0xFF;
 456:	1f ef       	ldi	r17, 0xFF	; 255
		break;
		
		default:
		// Handle invalid bitrate case
		cnf1 = 0xFF;
		cnf2 = 0xFF;
 458:	0f ef       	ldi	r16, 0xFF	; 255
		cnf3 = 0x80;
		break;
		
		default:
		// Handle invalid bitrate case
		cnf1 = 0xFF;
 45a:	4f ef       	ldi	r20, 0xFF	; 255
		cnf2 = 0xFF;
		cnf3 = 0xFF;
		break;
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		break;
		
		case CAN_83k3bps:
		cnf1 = 0x47;
		cnf2 = 0xE2;
		cnf3 = 0x85;
 45e:	15 e8       	ldi	r17, 0x85	; 133
		cnf3 = 0x86;
		break;
		
		case CAN_83k3bps:
		cnf1 = 0x47;
		cnf2 = 0xE2;
 460:	02 ee       	ldi	r16, 0xE2	; 226
		cnf2 = 0xB4;
		cnf3 = 0x86;
		break;
		
		case CAN_83k3bps:
		cnf1 = 0x47;
 462:	47 e4       	ldi	r20, 0x47	; 71
		cnf2 = 0xFF;
		cnf3 = 0xFF;
		break;
	}
	
	_mpc_write(MCP2515_REGISTER_CNF1, cnf1);
 464:	6a e2       	ldi	r22, 0x2A	; 42
 466:	ce 01       	movw	r24, r28
 468:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN11MCP2515_CAN10_mpc_writeEhh>
	_mpc_write(MCP2515_REGISTER_CNF2, cnf2);
 46c:	40 2f       	mov	r20, r16
 46e:	69 e2       	ldi	r22, 0x29	; 41
 470:	ce 01       	movw	r24, r28
 472:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN11MCP2515_CAN10_mpc_writeEhh>
	_mpc_write(MCP2515_REGISTER_CNF3, cnf3);
 476:	41 2f       	mov	r20, r17
 478:	68 e2       	ldi	r22, 0x28	; 40
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN11MCP2515_CAN10_mpc_writeEhh>
	
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t>:


//MCP2515 initialization and setup functions. Functions for sending and receiving messages
//____________________________________________________________________________________________________
bool MCP2515_CAN::begin(CAN_BITRATE_t can_speed)
{
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	ec 01       	movw	r28, r24
 492:	16 2f       	mov	r17, r22
	//initialise SPI peripheral
	_spi_init(SPI_PORT);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	74 e0       	ldi	r23, 0x04	; 4
 498:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN11MCP2515_CAN9_spi_initEP11PORT_struct>
	
	//send dummy message to ensure first transmission which sets the INTFLAGS
	_spi_open();
 49c:	ce 01       	movw	r24, r28
 49e:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN11MCP2515_CAN9_spi_openEv>
	_spi_write(0);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	ce 01       	movw	r24, r28
 4a6:	0e 94 bb 00 	call	0x176	; 0x176 <_ZN11MCP2515_CAN10_spi_writeEh>
	_spi_close();
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11MCP2515_CAN10_spi_closeEv>
	
	//reset the MCP2515 device
	_mcp_reset();
 4b0:	ce 01       	movw	r24, r28
 4b2:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN11MCP2515_CAN10_mcp_resetEv>
	
	//initialize the MCP2515
	//MCP2515 starts in configuration mode. The CNF1, CNF2, CNF3, filters and masks are only configurable in this mode.
	setBitrate(can_speed);
 4b6:	61 2f       	mov	r22, r17
 4b8:	ce 01       	movw	r24, r28
 4ba:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_ZN11MCP2515_CAN10setBitrateE13CAN_BITRATE_t>
	
	//start the MCP2515 by setting it in normal mode and return true if mode is set successfully
	MCP2515_MODE_t mode = setMode(MCP2515_MODE_NORMAL);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN11MCP2515_CAN7setModeE14MCP2515_MODE_t>
	if (mode == MCP2515_MODE_NORMAL)
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	09 f0       	breq	.+2      	; 0x4cc <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0x42>
		return true;
	
	return false;
 4ca:	80 e0       	ldi	r24, 0x00	; 0
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	08 95       	ret

000004d4 <_Z5setupv>:


//Setup
//____________________________________________________________________________________________________
void setup()
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
	//Clock configurations
	CCP = CCP_IOREG_gc;								//unlock protected register
 4d8:	88 ed       	ldi	r24, 0xD8	; 216
 4da:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSCHF_gc;	// Select high-frequency internal oscillator
 4dc:	e0 e6       	ldi	r30, 0x60	; 96
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	10 82       	st	Z, r1
	
	CCP = CCP_IOREG_gc; 
 4e2:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB &= ~CLKCTRL_PEN_bm;			// disable clock division
 4e4:	91 81       	ldd	r25, Z+1	; 0x01
 4e6:	9e 7f       	andi	r25, 0xFE	; 254
 4e8:	91 83       	std	Z+1, r25	; 0x01
		
	CCP = CCP_IOREG_gc; 
 4ea:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA = CLKCTRL_FRQSEL_16M_gc;		// Set clock frequency to 16 MHz
 4ec:	8c e1       	ldi	r24, 0x1C	; 28
 4ee:	80 87       	std	Z+8, r24	; 0x08
	
	
	
	// PIN configuration and setup
	PORTC.DIRSET = LED_PIN;
 4f0:	c0 e4       	ldi	r28, 0x40	; 64
 4f2:	d4 e0       	ldi	r29, 0x04	; 4
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	89 83       	std	Y+1, r24	; 0x01
	PORTC.OUT |= PIN6_bm;
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	80 64       	ori	r24, 0x40	; 64
 4fc:	8c 83       	std	Y+4, r24	; 0x04
	
	
	
	//CAN bus setup
	can.begin(CAN_125kbps);
 4fe:	64 e0       	ldi	r22, 0x04	; 4
 500:	8d e0       	ldi	r24, 0x0D	; 13
 502:	90 e4       	ldi	r25, 0x40	; 64
 504:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t>
	
	message.id = 0x00AA;
 508:	e2 e0       	ldi	r30, 0x02	; 2
 50a:	f0 e4       	ldi	r31, 0x40	; 64
 50c:	8a ea       	ldi	r24, 0xAA	; 170
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	80 83       	st	Z, r24
 512:	91 83       	std	Z+1, r25	; 0x01
	message.len = 8;
 514:	88 e0       	ldi	r24, 0x08	; 8
 516:	82 83       	std	Z+2, r24	; 0x02
	message.data[0] = 0x01;
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	93 83       	std	Z+3, r25	; 0x03
	message.data[1] = 0x02;
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	94 83       	std	Z+4, r25	; 0x04
	message.data[2] = 0x03;
 520:	93 e0       	ldi	r25, 0x03	; 3
 522:	95 83       	std	Z+5, r25	; 0x05
	message.data[3] = 0x04;
 524:	94 e0       	ldi	r25, 0x04	; 4
 526:	96 83       	std	Z+6, r25	; 0x06
	message.data[4] = 0x05;
 528:	95 e0       	ldi	r25, 0x05	; 5
 52a:	97 83       	std	Z+7, r25	; 0x07
	message.data[5] = 0x06;
 52c:	96 e0       	ldi	r25, 0x06	; 6
 52e:	90 87       	std	Z+8, r25	; 0x08
	message.data[6] = 0x07;
 530:	97 e0       	ldi	r25, 0x07	; 7
 532:	91 87       	std	Z+9, r25	; 0x09
	message.data[7] = 0x08;
 534:	82 87       	std	Z+10, r24	; 0x0a
	
	
	
	//setup complete
	PORTC.OUT &= ~PIN6_bm;
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	8f 7b       	andi	r24, 0xBF	; 191
 53a:	8c 83       	std	Y+4, r24	; 0x04
	
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <_Z4loopv>:
//Main loop
//____________________________________________________________________________________________________
void loop()
{
	//increment the counter
	counter++;
 542:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 546:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 550:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	
	//example modification of can bus message. Here you may update the data with a sensor reading
	message.id = 0x00AB;
 554:	e2 e0       	ldi	r30, 0x02	; 2
 556:	f0 e4       	ldi	r31, 0x40	; 64
 558:	2b ea       	ldi	r18, 0xAB	; 171
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	20 83       	st	Z, r18
 55e:	31 83       	std	Z+1, r19	; 0x01
	message.len = 2;
 560:	22 e0       	ldi	r18, 0x02	; 2
 562:	22 83       	std	Z+2, r18	; 0x02
	message.data[0] = (counter & 0xff00) >> 8;
 564:	93 83       	std	Z+3, r25	; 0x03
	message.data[1] = (counter & 0x00ff);
 566:	84 83       	std	Z+4, r24	; 0x04
	
	//send message
	can.sendMessage(&message);
 568:	bf 01       	movw	r22, r30
 56a:	8d e0       	ldi	r24, 0x0D	; 13
 56c:	90 e4       	ldi	r25, 0x40	; 64
 56e:	0e 94 8c 01 	call	0x318	; 0x318 <_ZN11MCP2515_CAN11sendMessageEP7can_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	81 ee       	ldi	r24, 0xE1	; 225
 576:	94 e0       	ldi	r25, 0x04	; 4
 578:	21 50       	subi	r18, 0x01	; 1
 57a:	80 40       	sbci	r24, 0x00	; 0
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <_Z4loopv+0x36>
 580:	00 c0       	rjmp	.+0      	; 0x582 <_Z4loopv+0x40>
 582:	00 00       	nop
	
	//delay 100ms before sending the next message
	_delay_ms(100);
	PORTC.OUTTGL |= PIN6_bm;
 584:	e0 e4       	ldi	r30, 0x40	; 64
 586:	f4 e0       	ldi	r31, 0x04	; 4
 588:	87 81       	ldd	r24, Z+7	; 0x07
 58a:	80 64       	ori	r24, 0x40	; 64
 58c:	87 83       	std	Z+7, r24	; 0x07
 58e:	08 95       	ret

00000590 <main>:

//Start
//____________________________________________________________________________________________________
int main(void)
{
	setup();
 590:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z5setupv>
		
    while (1) 
		loop();
 594:	0e 94 a1 02 	call	0x542	; 0x542 <_Z4loopv>
 598:	fd cf       	rjmp	.-6      	; 0x594 <main+0x4>

0000059a <__tablejump2__>:
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	00 24       	eor	r0, r0
 5a0:	00 1c       	adc	r0, r0
 5a2:	0b be       	out	0x3b, r0	; 59
 5a4:	07 90       	elpm	r0, Z+
 5a6:	f6 91       	elpm	r31, Z
 5a8:	e0 2d       	mov	r30, r0
 5aa:	09 94       	ijmp

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
