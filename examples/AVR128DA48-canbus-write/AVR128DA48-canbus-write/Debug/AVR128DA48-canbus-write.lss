
AVR128DA48-canbus-write.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00804000  00000758  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000758  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080401e  0080401e  0000080a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fe4  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000303d  00000000  00000000  00006938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ea  00000000  00000000  00009975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000aa60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dc4  00000000  00000000  0000ac10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018e9  00000000  00000000  0000c9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
  f4:	10 e4       	ldi	r17, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	e8 e5       	ldi	r30, 0x58	; 88
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 31       	cpi	r26, 0x1E	; 30
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	20 e4       	ldi	r18, 0x40	; 64
 110:	ae e1       	ldi	r26, 0x1E	; 30
 112:	b0 e4       	ldi	r27, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 32       	cpi	r26, 0x2A	; 42
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
 122:	0c 94 aa 03 	jmp	0x754	; 0x754 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg>:
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2d 97       	sbiw	r28, 0x0d	; 13
 134:	cd bf       	out	0x3d, r28	; 61
 136:	de bf       	out	0x3e, r29	; 62
 138:	fa 01       	movw	r30, r20
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	9c 01       	movw	r18, r24
 140:	36 95       	lsr	r19
 142:	27 95       	ror	r18
 144:	36 95       	lsr	r19
 146:	27 95       	ror	r18
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	29 83       	std	Y+1, r18	; 0x01
 14e:	82 95       	swap	r24
 150:	88 0f       	add	r24, r24
 152:	80 7e       	andi	r24, 0xE0	; 224
 154:	8a 83       	std	Y+2, r24	; 0x02
 156:	1b 82       	std	Y+3, r1	; 0x03
 158:	1c 82       	std	Y+4, r1	; 0x04
 15a:	82 81       	ldd	r24, Z+2	; 0x02
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	8d 83       	std	Y+5, r24	; 0x05
 160:	83 81       	ldd	r24, Z+3	; 0x03
 162:	8e 83       	std	Y+6, r24	; 0x06
 164:	84 81       	ldd	r24, Z+4	; 0x04
 166:	8f 83       	std	Y+7, r24	; 0x07
 168:	85 81       	ldd	r24, Z+5	; 0x05
 16a:	88 87       	std	Y+8, r24	; 0x08
 16c:	86 81       	ldd	r24, Z+6	; 0x06
 16e:	89 87       	std	Y+9, r24	; 0x09
 170:	87 81       	ldd	r24, Z+7	; 0x07
 172:	8a 87       	std	Y+10, r24	; 0x0a
 174:	80 85       	ldd	r24, Z+8	; 0x08
 176:	8b 87       	std	Y+11, r24	; 0x0b
 178:	81 85       	ldd	r24, Z+9	; 0x09
 17a:	8c 87       	std	Y+12, r24	; 0x0c
 17c:	82 85       	ldd	r24, Z+10	; 0x0a
 17e:	8d 87       	std	Y+13, r24	; 0x0d
 180:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 184:	8f 77       	andi	r24, 0x7F	; 127
 186:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	39 f1       	breq	.+78     	; 0x1dc <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0xb2>
 18e:	61 30       	cpi	r22, 0x01	; 1
 190:	69 f1       	breq	.+90     	; 0x1ec <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0xc2>
 192:	80 e4       	ldi	r24, 0x40	; 64
 194:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 198:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 19c:	87 ff       	sbrs	r24, 7
 19e:	fc cf       	rjmp	.-8      	; 0x198 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x6e>
 1a0:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1a4:	fe 01       	movw	r30, r28
 1a6:	31 96       	adiw	r30, 0x01	; 1
 1a8:	9e 01       	movw	r18, r28
 1aa:	22 5f       	subi	r18, 0xF2	; 242
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	81 91       	ld	r24, Z+
 1b0:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1b4:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1b8:	87 ff       	sbrs	r24, 7
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x8a>
 1bc:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1c0:	e2 17       	cp	r30, r18
 1c2:	f3 07       	cpc	r31, r19
 1c4:	a1 f7       	brne	.-24     	; 0x1ae <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x84>
 1c6:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1d0:	2d 96       	adiw	r28, 0x0d	; 13
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret
 1dc:	84 e4       	ldi	r24, 0x44	; 68
 1de:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1e2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1e6:	87 ff       	sbrs	r24, 7
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0xb8>
 1ea:	da cf       	rjmp	.-76     	; 0x1a0 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x76>
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1f2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1f6:	87 ff       	sbrs	r24, 7
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0xc8>
 1fa:	d2 cf       	rjmp	.-92     	; 0x1a0 <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg+0x76>

000001fc <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t>:
 1fc:	80 ed       	ldi	r24, 0xD0	; 208
 1fe:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
 202:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x7e0402>
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 218:	10 92 41 09 	sts	0x0941, r1	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
 21c:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 220:	81 60       	ori	r24, 0x01	; 1
 222:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 226:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 22a:	8f 77       	andi	r24, 0x7F	; 127
 22c:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 230:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 234:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 238:	87 ff       	sbrs	r24, 7
 23a:	fc cf       	rjmp	.-8      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 23c:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 240:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 244:	80 68       	ori	r24, 0x80	; 128
 246:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 24a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 254:	80 ec       	ldi	r24, 0xC0	; 192
 256:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 25a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 25e:	87 ff       	sbrs	r24, 7
 260:	fc cf       	rjmp	.-8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 262:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 266:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 270:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 274:	8f 77       	andi	r24, 0x7F	; 127
 276:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 280:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 284:	87 ff       	sbrs	r24, 7
 286:	fc cf       	rjmp	.-8      	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
 288:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 292:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 296:	87 ff       	sbrs	r24, 7
 298:	fc cf       	rjmp	.-8      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 29a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 29e:	88 e8       	ldi	r24, 0x88	; 136
 2a0:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2a4:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2a8:	87 ff       	sbrs	r24, 7
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
 2ac:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2b0:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2ba:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2be:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2c2:	87 ff       	sbrs	r24, 7
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
 2c6:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2ca:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2ce:	8f 77       	andi	r24, 0x7F	; 127
 2d0:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2da:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2de:	87 ff       	sbrs	r24, 7
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
 2e2:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2ec:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2f0:	87 ff       	sbrs	r24, 7
 2f2:	fc cf       	rjmp	.-8      	; 0x2ec <__EEPROM_REGION_LENGTH__+0xec>
 2f4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2f8:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2fc:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 300:	87 ff       	sbrs	r24, 7
 302:	fc cf       	rjmp	.-8      	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
 304:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 308:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 312:	69 30       	cpi	r22, 0x09	; 9
 314:	08 f0       	brcs	.+2      	; 0x318 <__EEPROM_REGION_LENGTH__+0x118>
 316:	f3 c0       	rjmp	.+486    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	fb 01       	movw	r30, r22
 31c:	ec 5e       	subi	r30, 0xEC	; 236
 31e:	ff 4b       	sbci	r31, 0xBF	; 191
 320:	30 81       	ld	r19, Z
 322:	fb 01       	movw	r30, r22
 324:	e5 5f       	subi	r30, 0xF5	; 245
 326:	ff 4b       	sbci	r31, 0xBF	; 191
 328:	20 81       	ld	r18, Z
 32a:	fb 01       	movw	r30, r22
 32c:	ee 5f       	subi	r30, 0xFE	; 254
 32e:	ff 4b       	sbci	r31, 0xBF	; 191
 330:	90 81       	ld	r25, Z
 332:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 336:	8f 77       	andi	r24, 0x7F	; 127
 338:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 342:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 346:	87 ff       	sbrs	r24, 7
 348:	fc cf       	rjmp	.-8      	; 0x342 <__EEPROM_REGION_LENGTH__+0x142>
 34a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 34e:	8a e2       	ldi	r24, 0x2A	; 42
 350:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 354:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 358:	87 ff       	sbrs	r24, 7
 35a:	fc cf       	rjmp	.-8      	; 0x354 <__EEPROM_REGION_LENGTH__+0x154>
 35c:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 360:	30 93 44 09 	sts	0x0944, r19	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 364:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 368:	87 ff       	sbrs	r24, 7
 36a:	fc cf       	rjmp	.-8      	; 0x364 <__EEPROM_REGION_LENGTH__+0x164>
 36c:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 370:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 374:	80 68       	ori	r24, 0x80	; 128
 376:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 37a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 37e:	8f 77       	andi	r24, 0x7F	; 127
 380:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 38a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 38e:	87 ff       	sbrs	r24, 7
 390:	fc cf       	rjmp	.-8      	; 0x38a <__EEPROM_REGION_LENGTH__+0x18a>
 392:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 396:	89 e2       	ldi	r24, 0x29	; 41
 398:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 39c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3a0:	87 ff       	sbrs	r24, 7
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <__EEPROM_REGION_LENGTH__+0x19c>
 3a4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3a8:	20 93 44 09 	sts	0x0944, r18	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3ac:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3b0:	87 ff       	sbrs	r24, 7
 3b2:	fc cf       	rjmp	.-8      	; 0x3ac <__EEPROM_REGION_LENGTH__+0x1ac>
 3b4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3b8:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3c2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3c6:	8f 77       	andi	r24, 0x7F	; 127
 3c8:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3d2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3d6:	87 ff       	sbrs	r24, 7
 3d8:	fc cf       	rjmp	.-8      	; 0x3d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 3da:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3de:	88 e2       	ldi	r24, 0x28	; 40
 3e0:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3e4:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3e8:	87 ff       	sbrs	r24, 7
 3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 3ec:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3f0:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3f4:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3f8:	87 ff       	sbrs	r24, 7
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 3fc:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 400:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 404:	80 68       	ori	r24, 0x80	; 128
 406:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 40a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 40e:	8f 77       	andi	r24, 0x7F	; 127
 410:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 41a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 41e:	87 ff       	sbrs	r24, 7
 420:	fc cf       	rjmp	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 426:	8b e2       	ldi	r24, 0x2B	; 43
 428:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 42c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 430:	87 ff       	sbrs	r24, 7
 432:	fc cf       	rjmp	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 43e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 442:	87 ff       	sbrs	r24, 7
 444:	fc cf       	rjmp	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 44a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 44e:	80 68       	ori	r24, 0x80	; 128
 450:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 454:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 458:	8f 77       	andi	r24, 0x7F	; 127
 45a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 464:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 468:	87 ff       	sbrs	r24, 7
 46a:	fc cf       	rjmp	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 470:	8f e0       	ldi	r24, 0x0F	; 15
 472:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 476:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 47a:	87 ff       	sbrs	r24, 7
 47c:	fc cf       	rjmp	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47e:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 488:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 48c:	87 ff       	sbrs	r24, 7
 48e:	fc cf       	rjmp	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 494:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 498:	80 68       	ori	r24, 0x80	; 128
 49a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 49e:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4a2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4a6:	87 ff       	sbrs	r24, 7
 4a8:	fc cf       	rjmp	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4ae:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 4b2:	8f 77       	andi	r24, 0x7F	; 127
 4b4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4be:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4c2:	87 ff       	sbrs	r24, 7
 4c4:	fc cf       	rjmp	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4c6:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4ca:	8e e0       	ldi	r24, 0x0E	; 14
 4cc:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4d0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4d4:	87 ff       	sbrs	r24, 7
 4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4dc:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4e0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4e4:	87 ff       	sbrs	r24, 7
 4e6:	fc cf       	rjmp	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4ec:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 4f0:	90 68       	ori	r25, 0x80	; 128
 4f2:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 4f6:	80 7e       	andi	r24, 0xE0	; 224
 4f8:	31 f0       	breq	.+12     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	2f ef       	ldi	r18, 0xFF	; 255
 502:	3f ef       	ldi	r19, 0xFF	; 255
 504:	16 cf       	rjmp	.-468    	; 0x332 <__EEPROM_REGION_LENGTH__+0x132>
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	08 95       	ret

0000050a <_ZN11MCP2515_CAN11sendMessageEP7can_msg>:
{
	_mcp_reset();
}

uint8_t  MCP2515_CAN::sendMessage(can_msg *msg)
{
 50a:	9c 01       	movw	r18, r24
 50c:	ab 01       	movw	r20, r22
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 50e:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 512:	9f 77       	andi	r25, 0x7F	; 127
 514:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 51e:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 522:	97 ff       	sbrs	r25, 7
 524:	fc cf       	rjmp	.-8      	; 0x51e <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x14>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 526:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 52a:	80 e3       	ldi	r24, 0x30	; 48
 52c:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 530:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 534:	97 ff       	sbrs	r25, 7
 536:	fc cf       	rjmp	.-8      	; 0x530 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x26>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 538:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 53c:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 540:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 544:	97 ff       	sbrs	r25, 7
 546:	fc cf       	rjmp	.-8      	; 0x540 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x36>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 548:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 54c:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 550:	90 68       	ori	r25, 0x80	; 128
 552:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	//Check if message is ok
	//TODO	
	
	//Check if any if the three TX buffers are free. If not, return false
	uint8_t n = -1;
	if (!(_mcp_read(MCP2515_REGISTER_TXB0CTRL) & TXBnCTRL_TXREQ_bm))
 556:	83 ff       	sbrs	r24, 3
 558:	3f c0       	rjmp	.+126    	; 0x5d8 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0xce>
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 55a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 55e:	8f 77       	andi	r24, 0x7F	; 127
 560:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 56a:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 56e:	97 ff       	sbrs	r25, 7
 570:	fc cf       	rjmp	.-8      	; 0x56a <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x60>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 572:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 576:	80 e4       	ldi	r24, 0x40	; 64
 578:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 57c:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 580:	97 ff       	sbrs	r25, 7
 582:	fc cf       	rjmp	.-8      	; 0x57c <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x72>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 584:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 588:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 58c:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 590:	97 ff       	sbrs	r25, 7
 592:	fc cf       	rjmp	.-8      	; 0x58c <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x82>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 594:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 598:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	
	//Check if any if the three TX buffers are free. If not, return false
	uint8_t n = -1;
	if (!(_mcp_read(MCP2515_REGISTER_TXB0CTRL) & TXBnCTRL_TXREQ_bm))
		n = 0;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB1CTRL) & TXBnCTRL_TXREQ_bm))
 5a2:	93 fd       	sbrc	r25, 3
 5a4:	32 c0       	rjmp	.+100    	; 0x60a <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x100>
		n = 2;
	else
		return false;
	
	//load message into TXBn buffer and request to send
	_mcp_loadtxbn(n, msg);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	c9 01       	movw	r24, r18
 5aa:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg>
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 5ae:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 5b2:	8f 77       	andi	r24, 0x7F	; 127
 5b4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 5b8:	82 e8       	ldi	r24, 0x82	; 130
 5ba:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 5be:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 5c2:	87 ff       	sbrs	r24, 7
 5c4:	fc cf       	rjmp	.-8      	; 0x5be <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0xb4>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 5c6:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 5cc:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 5d0:	90 68       	ori	r25, 0x80	; 128
 5d2:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 5d6:	08 95       	ret
		n = 2;
	else
		return false;
	
	//load message into TXBn buffer and request to send
	_mcp_loadtxbn(n, msg);
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	c9 01       	movw	r24, r18
 5dc:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg>
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 5e0:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 5e4:	8f 77       	andi	r24, 0x7F	; 127
 5e6:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 5ea:	81 e8       	ldi	r24, 0x81	; 129
 5ec:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 5f0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 5f4:	87 ff       	sbrs	r24, 7
 5f6:	fc cf       	rjmp	.-8      	; 0x5f0 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0xe6>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 5f8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	//TODO	
	
	//Check if any if the three TX buffers are free. If not, return false
	uint8_t n = -1;
	if (!(_mcp_read(MCP2515_REGISTER_TXB0CTRL) & TXBnCTRL_TXREQ_bm))
		n = 0;
 5fc:	80 e0       	ldi	r24, 0x00	; 0
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 5fe:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 602:	90 68       	ori	r25, 0x80	; 128
 604:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 608:	08 95       	ret
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 60a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 60e:	8f 77       	andi	r24, 0x7F	; 127
 610:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 61a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 61e:	87 ff       	sbrs	r24, 7
 620:	fc cf       	rjmp	.-8      	; 0x61a <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x110>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 622:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 626:	80 e5       	ldi	r24, 0x50	; 80
 628:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 62c:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 630:	97 ff       	sbrs	r25, 7
 632:	fc cf       	rjmp	.-8      	; 0x62c <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x122>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 634:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 638:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 63c:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 640:	97 ff       	sbrs	r25, 7
 642:	fc cf       	rjmp	.-8      	; 0x63c <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x132>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 644:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 648:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	uint8_t n = -1;
	if (!(_mcp_read(MCP2515_REGISTER_TXB0CTRL) & TXBnCTRL_TXREQ_bm))
		n = 0;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB1CTRL) & TXBnCTRL_TXREQ_bm))
		n = 1;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB2CTRL) & TXBnCTRL_TXREQ_bm))
 652:	93 fd       	sbrc	r25, 3
 654:	19 c0       	rjmp	.+50     	; 0x688 <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x17e>
		n = 2;
	else
		return false;
	
	//load message into TXBn buffer and request to send
	_mcp_loadtxbn(n, msg);
 656:	62 e0       	ldi	r22, 0x02	; 2
 658:	c9 01       	movw	r24, r18
 65a:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN11MCP2515_CAN13_mcp_loadtxbnEhP7can_msg>
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 65e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 662:	8f 77       	andi	r24, 0x7F	; 127
 664:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 668:	84 e8       	ldi	r24, 0x84	; 132
 66a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 66e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 672:	87 ff       	sbrs	r24, 7
 674:	fc cf       	rjmp	.-8      	; 0x66e <_ZN11MCP2515_CAN11sendMessageEP7can_msg+0x164>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 676:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	if (!(_mcp_read(MCP2515_REGISTER_TXB0CTRL) & TXBnCTRL_TXREQ_bm))
		n = 0;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB1CTRL) & TXBnCTRL_TXREQ_bm))
		n = 1;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB2CTRL) & TXBnCTRL_TXREQ_bm))
		n = 2;
 67a:	82 e0       	ldi	r24, 0x02	; 2
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 67c:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 680:	90 68       	ori	r25, 0x80	; 128
 682:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 686:	08 95       	ret
	else if (!(_mcp_read(MCP2515_REGISTER_TXB1CTRL) & TXBnCTRL_TXREQ_bm))
		n = 1;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB2CTRL) & TXBnCTRL_TXREQ_bm))
		n = 2;
	else
		return false;
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	08 95       	ret

0000068c <_Z5setupv>:
	//send message
	can.sendMessage(&message);
	
	//delay 100ms before sending the next message. Toggle the on-board LED to indicate activity
	_delay_ms(100);
	PORTC.OUTTGL |= PIN6_bm;
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	88 ed       	ldi	r24, 0xD8	; 216
 692:	84 bf       	out	0x34, r24	; 52
 694:	e0 e6       	ldi	r30, 0x60	; 96
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	10 82       	st	Z, r1
 69a:	84 bf       	out	0x34, r24	; 52
 69c:	91 81       	ldd	r25, Z+1	; 0x01
 69e:	9e 7f       	andi	r25, 0xFE	; 254
 6a0:	91 83       	std	Z+1, r25	; 0x01
 6a2:	84 bf       	out	0x34, r24	; 52
 6a4:	8c e1       	ldi	r24, 0x1C	; 28
 6a6:	80 87       	std	Z+8, r24	; 0x08
 6a8:	c0 e4       	ldi	r28, 0x40	; 64
 6aa:	d4 e0       	ldi	r29, 0x04	; 4
 6ac:	80 e4       	ldi	r24, 0x40	; 64
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	8c 81       	ldd	r24, Y+4	; 0x04
 6b2:	80 64       	ori	r24, 0x40	; 64
 6b4:	8c 83       	std	Y+4, r24	; 0x04
 6b6:	64 e0       	ldi	r22, 0x04	; 4
 6b8:	89 e2       	ldi	r24, 0x29	; 41
 6ba:	90 e4       	ldi	r25, 0x40	; 64
 6bc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t>
 6c0:	ee e1       	ldi	r30, 0x1E	; 30
 6c2:	f0 e4       	ldi	r31, 0x40	; 64
 6c4:	8a ea       	ldi	r24, 0xAA	; 170
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	80 83       	st	Z, r24
 6ca:	91 83       	std	Z+1, r25	; 0x01
 6cc:	88 e0       	ldi	r24, 0x08	; 8
 6ce:	82 83       	std	Z+2, r24	; 0x02
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	93 83       	std	Z+3, r25	; 0x03
 6d4:	92 e0       	ldi	r25, 0x02	; 2
 6d6:	94 83       	std	Z+4, r25	; 0x04
 6d8:	93 e0       	ldi	r25, 0x03	; 3
 6da:	95 83       	std	Z+5, r25	; 0x05
 6dc:	94 e0       	ldi	r25, 0x04	; 4
 6de:	96 83       	std	Z+6, r25	; 0x06
 6e0:	95 e0       	ldi	r25, 0x05	; 5
 6e2:	97 83       	std	Z+7, r25	; 0x07
 6e4:	96 e0       	ldi	r25, 0x06	; 6
 6e6:	90 87       	std	Z+8, r25	; 0x08
 6e8:	97 e0       	ldi	r25, 0x07	; 7
 6ea:	91 87       	std	Z+9, r25	; 0x09
 6ec:	82 87       	std	Z+10, r24	; 0x0a
 6ee:	8c 81       	ldd	r24, Y+4	; 0x04
 6f0:	8f 7b       	andi	r24, 0xBF	; 191
 6f2:	8c 83       	std	Y+4, r24	; 0x04
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <main>:

//Start
//____________________________________________________________________________________________________
int main(void)
{
	setup();
 6fa:	0e 94 46 03 	call	0x68c	; 0x68c <_Z5setupv>
{
	//increment the counter
	counter++;
	
	//example modification of can bus message. Here you may update the data with a sensor reading
	message.id = 0x00AB;
 6fe:	0b ea       	ldi	r16, 0xAB	; 171
 700:	10 e0       	ldi	r17, 0x00	; 0
	message.len = 2;
 702:	c2 e0       	ldi	r28, 0x02	; 2
//Main loop
//____________________________________________________________________________________________________
void loop()
{
	//increment the counter
	counter++;
 704:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 708:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 70c:	01 96       	adiw	r24, 0x01	; 1
 70e:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 712:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	
	//example modification of can bus message. Here you may update the data with a sensor reading
	message.id = 0x00AB;
 716:	00 93 1e 40 	sts	0x401E, r16	; 0x80401e <__data_end>
 71a:	10 93 1f 40 	sts	0x401F, r17	; 0x80401f <__data_end+0x1>
	message.len = 2;
 71e:	c0 93 20 40 	sts	0x4020, r28	; 0x804020 <__data_end+0x2>
	message.data[0] = (counter & 0xff00) >> 8;
 722:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <__data_end+0x3>
	message.data[1] = (counter & 0x00ff);
 726:	80 93 22 40 	sts	0x4022, r24	; 0x804022 <__data_end+0x4>
	
	//send message
	can.sendMessage(&message);
 72a:	6e e1       	ldi	r22, 0x1E	; 30
 72c:	70 e4       	ldi	r23, 0x40	; 64
 72e:	89 e2       	ldi	r24, 0x29	; 41
 730:	90 e4       	ldi	r25, 0x40	; 64
 732:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN11MCP2515_CAN11sendMessageEP7can_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 736:	2f ef       	ldi	r18, 0xFF	; 255
 738:	81 ee       	ldi	r24, 0xE1	; 225
 73a:	94 e0       	ldi	r25, 0x04	; 4
 73c:	21 50       	subi	r18, 0x01	; 1
 73e:	80 40       	sbci	r24, 0x00	; 0
 740:	90 40       	sbci	r25, 0x00	; 0
 742:	e1 f7       	brne	.-8      	; 0x73c <main+0x42>
 744:	00 c0       	rjmp	.+0      	; 0x746 <main+0x4c>
 746:	00 00       	nop
	
	//delay 100ms before sending the next message. Toggle the on-board LED to indicate activity
	_delay_ms(100);
	PORTC.OUTTGL |= PIN6_bm;
 748:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__TEXT_REGION_LENGTH__+0x7e0447>
 74c:	80 64       	ori	r24, 0x40	; 64
 74e:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7e0447>
 752:	d8 cf       	rjmp	.-80     	; 0x704 <main+0xa>

00000754 <_exit>:
 754:	f8 94       	cli

00000756 <__stop_program>:
 756:	ff cf       	rjmp	.-2      	; 0x756 <__stop_program>
