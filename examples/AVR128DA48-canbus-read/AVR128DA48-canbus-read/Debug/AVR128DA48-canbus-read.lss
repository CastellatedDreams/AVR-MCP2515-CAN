
AVR128DA48-canbus-read.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00804000  00000634  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080401c  0080401c  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f33  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fec  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff0  00000000  00000000  0000974b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  0000a73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d6f  00000000  00000000  0000a90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018e7  00000000  00000000  0000c67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000df62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e8 <__ctors_end>:
  e8:	11 24       	eor	r1, r1
  ea:	1f be       	out	0x3f, r1	; 63
  ec:	cf ef       	ldi	r28, 0xFF	; 255
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	df e7       	ldi	r29, 0x7F	; 127
  f2:	de bf       	out	0x3e, r29	; 62

000000f4 <__do_copy_data>:
  f4:	10 e4       	ldi	r17, 0x40	; 64
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e4       	ldi	r27, 0x40	; 64
  fa:	e4 e3       	ldi	r30, 0x34	; 52
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	20 e4       	ldi	r18, 0x40	; 64
 110:	ac e1       	ldi	r26, 0x1C	; 28
 112:	b0 e4       	ldi	r27, 0x40	; 64
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 33       	cpi	r26, 0x35	; 53
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <main>
 122:	0c 94 18 03 	jmp	0x630	; 0x630 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t>:
	else if (!(_mcp_read(MCP2515_REGISTER_TXB1CTRL) & TXBnCTRL_TXREQ_bm))
		n = 1;
	else if (!(_mcp_read(MCP2515_REGISTER_TXB2CTRL) & TXBnCTRL_TXREQ_bm))
		n = 2;
	else
		return false;
 12a:	80 ed       	ldi	r24, 0xD0	; 208
 12c:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
 130:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 134:	80 68       	ori	r24, 0x80	; 128
 136:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x7e0402>
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 146:	10 92 41 09 	sts	0x0941, r1	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
 14a:	80 91 40 09 	lds	r24, 0x0940	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 154:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 15e:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 162:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 166:	87 ff       	sbrs	r24, 7
 168:	fc cf       	rjmp	.-8      	; 0x162 <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0x38>
 16a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 16e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 172:	80 68       	ori	r24, 0x80	; 128
 174:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 178:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 188:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 18c:	87 ff       	sbrs	r24, 7
 18e:	fc cf       	rjmp	.-8      	; 0x188 <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0x5e>
 190:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 194:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 19e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1a2:	8f 77       	andi	r24, 0x7F	; 127
 1a4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1ae:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1b2:	87 ff       	sbrs	r24, 7
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0x84>
 1b6:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1ba:	8f e0       	ldi	r24, 0x0F	; 15
 1bc:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1c0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1c4:	87 ff       	sbrs	r24, 7
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0x96>
 1c8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1cc:	88 e8       	ldi	r24, 0x88	; 136
 1ce:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1d2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1d6:	87 ff       	sbrs	r24, 7
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0xa8>
 1da:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1de:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1e8:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1ec:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1f0:	87 ff       	sbrs	r24, 7
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t+0xc2>
 1f4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1f8:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 208:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 20c:	87 ff       	sbrs	r24, 7
 20e:	fc cf       	rjmp	.-8      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 210:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 214:	8e e0       	ldi	r24, 0x0E	; 14
 216:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 21a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 21e:	87 ff       	sbrs	r24, 7
 220:	fc cf       	rjmp	.-8      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 222:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 226:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 22a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 22e:	87 ff       	sbrs	r24, 7
 230:	fc cf       	rjmp	.-8      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 232:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 236:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 240:	69 30       	cpi	r22, 0x09	; 9
 242:	08 f0       	brcs	.+2      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 244:	f3 c0       	rjmp	.+486    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	fb 01       	movw	r30, r22
 24a:	ee 5e       	subi	r30, 0xEE	; 238
 24c:	ff 4b       	sbci	r31, 0xBF	; 191
 24e:	30 81       	ld	r19, Z
 250:	fb 01       	movw	r30, r22
 252:	e7 5f       	subi	r30, 0xF7	; 247
 254:	ff 4b       	sbci	r31, 0xBF	; 191
 256:	20 81       	ld	r18, Z
 258:	fb 01       	movw	r30, r22
 25a:	e0 50       	subi	r30, 0x00	; 0
 25c:	f0 4c       	sbci	r31, 0xC0	; 192
 25e:	90 81       	ld	r25, Z
 260:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 264:	8f 77       	andi	r24, 0x7F	; 127
 266:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 270:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 274:	87 ff       	sbrs	r24, 7
 276:	fc cf       	rjmp	.-8      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 278:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 27c:	8a e2       	ldi	r24, 0x2A	; 42
 27e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 282:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 286:	87 ff       	sbrs	r24, 7
 288:	fc cf       	rjmp	.-8      	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
 28a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 28e:	30 93 44 09 	sts	0x0944, r19	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 292:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 296:	87 ff       	sbrs	r24, 7
 298:	fc cf       	rjmp	.-8      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 29a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 29e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2a8:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2ac:	8f 77       	andi	r24, 0x7F	; 127
 2ae:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2b8:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2bc:	87 ff       	sbrs	r24, 7
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
 2c0:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2c4:	89 e2       	ldi	r24, 0x29	; 41
 2c6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2ca:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2ce:	87 ff       	sbrs	r24, 7
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
 2d2:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2d6:	20 93 44 09 	sts	0x0944, r18	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2da:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2de:	87 ff       	sbrs	r24, 7
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
 2e2:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2e6:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2f0:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2f4:	8f 77       	andi	r24, 0x7F	; 127
 2f6:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 300:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 304:	87 ff       	sbrs	r24, 7
 306:	fc cf       	rjmp	.-8      	; 0x300 <__EEPROM_REGION_LENGTH__+0x100>
 308:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 30c:	88 e2       	ldi	r24, 0x28	; 40
 30e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 312:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 316:	87 ff       	sbrs	r24, 7
 318:	fc cf       	rjmp	.-8      	; 0x312 <__EEPROM_REGION_LENGTH__+0x112>
 31a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 31e:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 322:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 326:	87 ff       	sbrs	r24, 7
 328:	fc cf       	rjmp	.-8      	; 0x322 <__EEPROM_REGION_LENGTH__+0x122>
 32a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 32e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 332:	80 68       	ori	r24, 0x80	; 128
 334:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 338:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 33c:	8f 77       	andi	r24, 0x7F	; 127
 33e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 348:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 34c:	87 ff       	sbrs	r24, 7
 34e:	fc cf       	rjmp	.-8      	; 0x348 <__EEPROM_REGION_LENGTH__+0x148>
 350:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 354:	8b e2       	ldi	r24, 0x2B	; 43
 356:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 35a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 35e:	87 ff       	sbrs	r24, 7
 360:	fc cf       	rjmp	.-8      	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
 362:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 36c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 370:	87 ff       	sbrs	r24, 7
 372:	fc cf       	rjmp	.-8      	; 0x36c <__EEPROM_REGION_LENGTH__+0x16c>
 374:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 378:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 37c:	80 68       	ori	r24, 0x80	; 128
 37e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 382:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 386:	8f 77       	andi	r24, 0x7F	; 127
 388:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 392:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 396:	87 ff       	sbrs	r24, 7
 398:	fc cf       	rjmp	.-8      	; 0x392 <__EEPROM_REGION_LENGTH__+0x192>
 39a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 39e:	8f e0       	ldi	r24, 0x0F	; 15
 3a0:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3a4:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3a8:	87 ff       	sbrs	r24, 7
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 3ac:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3b0:	88 e0       	ldi	r24, 0x08	; 8
 3b2:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3b6:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3ba:	87 ff       	sbrs	r24, 7
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 3be:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3c2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3cc:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3d0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3d4:	87 ff       	sbrs	r24, 7
 3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 3d8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3dc:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3e0:	8f 77       	andi	r24, 0x7F	; 127
 3e2:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 3e6:	83 e0       	ldi	r24, 0x03	; 3
 3e8:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3ec:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3f0:	87 ff       	sbrs	r24, 7
 3f2:	fc cf       	rjmp	.-8      	; 0x3ec <__EEPROM_REGION_LENGTH__+0x1ec>
 3f4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3f8:	8e e0       	ldi	r24, 0x0E	; 14
 3fa:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3fe:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 402:	87 ff       	sbrs	r24, 7
 404:	fc cf       	rjmp	.-8      	; 0x3fe <__EEPROM_REGION_LENGTH__+0x1fe>
 406:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 40a:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 40e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 412:	87 ff       	sbrs	r24, 7
 414:	fc cf       	rjmp	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 41a:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 41e:	90 68       	ori	r25, 0x80	; 128
 420:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 424:	80 7e       	andi	r24, 0xE0	; 224
 426:	31 f0       	breq	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	3f ef       	ldi	r19, 0xFF	; 255
 432:	16 cf       	rjmp	.-468    	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	08 95       	ret

00000438 <_ZN11MCP2515_CAN9availableEv>:
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 438:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 43c:	8f 77       	andi	r24, 0x7F	; 127
 43e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 442:	80 eb       	ldi	r24, 0xB0	; 176
 444:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 448:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 44c:	87 ff       	sbrs	r24, 7
 44e:	fc cf       	rjmp	.-8      	; 0x448 <_ZN11MCP2515_CAN9availableEv+0x10>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 450:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 454:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 458:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 45c:	87 ff       	sbrs	r24, 7
 45e:	fc cf       	rjmp	.-8      	; 0x458 <_ZN11MCP2515_CAN9availableEv+0x20>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 460:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 464:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 468:	90 68       	ori	r25, 0x80	; 128
 46a:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
uint8_t MCP2515_CAN::available()
{
	uint8_t rxstatus = _mcp_rxstatus();
	uint8_t n = (rxstatus >> 6) & 0x03;
	return n;
}
 46e:	82 95       	swap	r24
 470:	86 95       	lsr	r24
 472:	86 95       	lsr	r24
 474:	83 70       	andi	r24, 0x03	; 3
 476:	08 95       	ret

00000478 <_ZN11MCP2515_CAN11readMessageEv>:

can_msg MCP2515_CAN::readMessage()
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 47e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 482:	8f 77       	andi	r24, 0x7F	; 127
 484:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 488:	80 eb       	ldi	r24, 0xB0	; 176
 48a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 48e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 492:	87 ff       	sbrs	r24, 7
 494:	fc cf       	rjmp	.-8      	; 0x48e <_ZN11MCP2515_CAN11readMessageEv+0x16>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 496:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 49a:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 49e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4a2:	87 ff       	sbrs	r24, 7
 4a4:	fc cf       	rjmp	.-8      	; 0x49e <_ZN11MCP2515_CAN11readMessageEv+0x26>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 4a6:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	return;
}

void MCP2515_CAN::_spi_close()
{
	PORTA.OUT |= PIN7_bm;
 4aa:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 4ae:	80 68       	ori	r24, 0x80	; 128
 4b0:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
{
	can_msg msg;
	uint8_t* rxbn;
	
	uint8_t rxstatus = _mcp_rxstatus();
	if (rxstatus & MCP2515_RXSTATUS_MSGINRXB0_bm)
 4b4:	96 ff       	sbrs	r25, 6
 4b6:	40 c0       	rjmp	.+128    	; 0x538 <_ZN11MCP2515_CAN11readMessageEv+0xc0>
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 4b8:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 4bc:	8f 77       	andi	r24, 0x7F	; 127
 4be:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 4c2:	80 e9       	ldi	r24, 0x90	; 144
 4c4:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 4c8:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4cc:	87 ff       	sbrs	r24, 7
 4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <_ZN11MCP2515_CAN11readMessageEv+0x50>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 4d0:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 4d4:	ec e1       	ldi	r30, 0x1C	; 28
 4d6:	f0 e4       	ldi	r31, 0x40	; 64
 4d8:	29 e2       	ldi	r18, 0x29	; 41
 4da:	30 e4       	ldi	r19, 0x40	; 64
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 4dc:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 4e0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 4e4:	87 ff       	sbrs	r24, 7
 4e6:	fc cf       	rjmp	.-8      	; 0x4e0 <_ZN11MCP2515_CAN11readMessageEv+0x68>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 4e8:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		
	//read RX buffer n
	static uint8_t rxbn[13]; 
	
	 for (int i = 0; i < 13; i++) {
		 rxbn[i] = _spi_write(0);
 4ec:	81 93       	st	Z+, r24
		_spi_write(MCP2515_INSTRUCTION_READRX0);
		
	//read RX buffer n
	static uint8_t rxbn[13]; 
	
	 for (int i = 0; i < 13; i++) {
 4ee:	2e 17       	cp	r18, r30
 4f0:	3f 07       	cpc	r19, r31
 4f2:	a1 f7       	brne	.-24     	; 0x4dc <_ZN11MCP2515_CAN11readMessageEv+0x64>
		msg.data[0] = 0;
		return msg;
	}
	
	//extract the ID
	msg.id = (rxbn[0] << 3) | ((rxbn[1] & RXBnSIDL_SID_gc) >> 5);
 4f4:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <__data_end>
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	20 91 1d 40 	lds	r18, 0x401D	; 0x80401d <__data_end+0x1>
 50a:	22 95       	swap	r18
 50c:	26 95       	lsr	r18
 50e:	27 70       	andi	r18, 0x07	; 7
 510:	82 2b       	or	r24, r18
 512:	88 83       	st	Y, r24
 514:	99 83       	std	Y+1, r25	; 0x01

	//extract data length
	msg.len = rxbn[4] & RXBnDLC_DLC_gc;  // DLC is the lower 4 bits of frame[4]
 516:	40 91 20 40 	lds	r20, 0x4020	; 0x804020 <__data_end+0x4>
 51a:	4f 70       	andi	r20, 0x0F	; 15
 51c:	4a 83       	std	Y+2, r20	; 0x02

	//extract data
	for (int i = 0; i < msg.len; i++) 
 51e:	44 23       	and	r20, r20
 520:	39 f0       	breq	.+14     	; 0x530 <_ZN11MCP2515_CAN11readMessageEv+0xb8>
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	61 e2       	ldi	r22, 0x21	; 33
 526:	70 e4       	ldi	r23, 0x40	; 64
 528:	ce 01       	movw	r24, r28
 52a:	03 96       	adiw	r24, 0x03	; 3
 52c:	0e 94 0f 03 	call	0x61e	; 0x61e <memcpy>
	{
		msg.data[i] = rxbn[5 + i];
	}

	return msg;
}
 530:	ce 01       	movw	r24, r28
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret
	
	uint8_t rxstatus = _mcp_rxstatus();
	if (rxstatus & MCP2515_RXSTATUS_MSGINRXB0_bm)
		rxbn = _mcp_readrxbn(0);
		
	else if (rxstatus & MCP2515_RXSTATUS_MSGINRXB1_bm)
 538:	97 fd       	sbrc	r25, 7
 53a:	08 c0       	rjmp	.+16     	; 0x54c <_ZN11MCP2515_CAN11readMessageEv+0xd4>
		rxbn = _mcp_readrxbn(1);
		
	else
	{
		//TODO: find a better way to handle this
		msg.id = 0x00;
 53c:	18 82       	st	Y, r1
 53e:	19 82       	std	Y+1, r1	; 0x01
		msg.len = 0;
 540:	1a 82       	std	Y+2, r1	; 0x02
		msg.data[0] = 0;
 542:	1b 82       	std	Y+3, r1	; 0x03
	{
		msg.data[i] = rxbn[5 + i];
	}

	return msg;
}
 544:	ce 01       	movw	r24, r28
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret
	SPI0.CTRLA		|= SPI_ENABLE_bm;
}

void MCP2515_CAN::_spi_open()
{
	PORTA.OUT &= ~PIN7_bm;
 54c:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
 550:	8f 77       	andi	r24, 0x7F	; 127
 552:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__TEXT_REGION_LENGTH__+0x7e0404>
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 556:	84 e9       	ldi	r24, 0x94	; 148
 558:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 55c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 560:	87 ff       	sbrs	r24, 7
 562:	fc cf       	rjmp	.-8      	; 0x55c <_ZN11MCP2515_CAN11readMessageEv+0xe4>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 564:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 568:	ec e1       	ldi	r30, 0x1C	; 28
 56a:	f0 e4       	ldi	r31, 0x40	; 64
	return;
}

uint8_t MCP2515_CAN::_spi_write(uint8_t data)
{
	SPI0.DATA = data;						// Send data
 56c:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while (!(SPI0.INTFLAGS & SPI_IF_bm));	// Wait for data register to be empty
 570:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 574:	87 ff       	sbrs	r24, 7
 576:	fc cf       	rjmp	.-8      	; 0x570 <_ZN11MCP2515_CAN11readMessageEv+0xf8>
	
	uint8_t response =  SPI0.DATA;			// extract the response shifted into SPI0.DATA
 578:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		
	//read RX buffer n
	static uint8_t rxbn[13]; 
	
	 for (int i = 0; i < 13; i++) {
		 rxbn[i] = _spi_write(0);
 57c:	81 93       	st	Z+, r24
		_spi_write(MCP2515_INSTRUCTION_READRX0);
		
	//read RX buffer n
	static uint8_t rxbn[13]; 
	
	 for (int i = 0; i < 13; i++) {
 57e:	80 e4       	ldi	r24, 0x40	; 64
 580:	e9 32       	cpi	r30, 0x29	; 41
 582:	f8 07       	cpc	r31, r24
 584:	99 f7       	brne	.-26     	; 0x56c <_ZN11MCP2515_CAN11readMessageEv+0xf4>
 586:	b6 cf       	rjmp	.-148    	; 0x4f4 <_ZN11MCP2515_CAN11readMessageEv+0x7c>

00000588 <_Z5setupv>:
		if(message.id == 0x00AB)
			PORTC.OUTTGL |= PIN6_bm;
		
	}

}
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	88 ed       	ldi	r24, 0xD8	; 216
 58e:	84 bf       	out	0x34, r24	; 52
 590:	e0 e6       	ldi	r30, 0x60	; 96
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	10 82       	st	Z, r1
 596:	84 bf       	out	0x34, r24	; 52
 598:	91 81       	ldd	r25, Z+1	; 0x01
 59a:	9e 7f       	andi	r25, 0xFE	; 254
 59c:	91 83       	std	Z+1, r25	; 0x01
 59e:	84 bf       	out	0x34, r24	; 52
 5a0:	8c e1       	ldi	r24, 0x1C	; 28
 5a2:	80 87       	std	Z+8, r24	; 0x08
 5a4:	c0 e4       	ldi	r28, 0x40	; 64
 5a6:	d4 e0       	ldi	r29, 0x04	; 4
 5a8:	80 e4       	ldi	r24, 0x40	; 64
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	8c 81       	ldd	r24, Y+4	; 0x04
 5ae:	80 64       	ori	r24, 0x40	; 64
 5b0:	8c 83       	std	Y+4, r24	; 0x04
 5b2:	64 e0       	ldi	r22, 0x04	; 4
 5b4:	84 e3       	ldi	r24, 0x34	; 52
 5b6:	90 e4       	ldi	r25, 0x40	; 64
 5b8:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN11MCP2515_CAN5beginE13CAN_BITRATE_t>
 5bc:	8c 81       	ldd	r24, Y+4	; 0x04
 5be:	8f 7b       	andi	r24, 0xBF	; 191
 5c0:	8c 83       	std	Y+4, r24	; 0x04
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <main>:


//Start
//____________________________________________________________________________________________________
int main(void)
{
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	2b 97       	sbiw	r28, 0x0b	; 11
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	de bf       	out	0x3e, r29	; 62
	setup();
 5d6:	0e 94 c4 02 	call	0x588	; 0x588 <_Z5setupv>
//Main loop
//____________________________________________________________________________________________________
void loop()
{	
	//Check if there are any messages available in the MCP2515 buffer
	if(can.available() > 0)
 5da:	84 e3       	ldi	r24, 0x34	; 52
 5dc:	90 e4       	ldi	r25, 0x40	; 64
 5de:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN11MCP2515_CAN9availableEv>
 5e2:	88 23       	and	r24, r24
 5e4:	d1 f3       	breq	.-12     	; 0x5da <main+0x12>
	{
		//read the message
		message = can.readMessage();
 5e6:	64 e3       	ldi	r22, 0x34	; 52
 5e8:	70 e4       	ldi	r23, 0x40	; 64
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN11MCP2515_CAN11readMessageEv>
 5f2:	8b e0       	ldi	r24, 0x0B	; 11
 5f4:	fe 01       	movw	r30, r28
 5f6:	31 96       	adiw	r30, 0x01	; 1
 5f8:	a9 e2       	ldi	r26, 0x29	; 41
 5fa:	b0 e4       	ldi	r27, 0x40	; 64
 5fc:	01 90       	ld	r0, Z+
 5fe:	0d 92       	st	X+, r0
 600:	8a 95       	dec	r24
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x34>
		
		//toggle the LED if a message was recieved from a node with address 0x00AB
		if(message.id == 0x00AB)
 604:	80 91 29 40 	lds	r24, 0x4029	; 0x804029 <message>
 608:	90 91 2a 40 	lds	r25, 0x402A	; 0x80402a <message+0x1>
 60c:	8b 3a       	cpi	r24, 0xAB	; 171
 60e:	91 05       	cpc	r25, r1
 610:	21 f7       	brne	.-56     	; 0x5da <main+0x12>
			PORTC.OUTTGL |= PIN6_bm;
 612:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__TEXT_REGION_LENGTH__+0x7e0447>
 616:	80 64       	ori	r24, 0x40	; 64
 618:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7e0447>
 61c:	de cf       	rjmp	.-68     	; 0x5da <main+0x12>

0000061e <memcpy>:
 61e:	fb 01       	movw	r30, r22
 620:	dc 01       	movw	r26, r24
 622:	02 c0       	rjmp	.+4      	; 0x628 <memcpy+0xa>
 624:	01 90       	ld	r0, Z+
 626:	0d 92       	st	X+, r0
 628:	41 50       	subi	r20, 0x01	; 1
 62a:	50 40       	sbci	r21, 0x00	; 0
 62c:	d8 f7       	brcc	.-10     	; 0x624 <memcpy+0x6>
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>
